   pcl::PointCloud<pcl::PointXYZ>::Ptr cloud_filteredz (new pcl::PointCloud<pcl::PointXYZ>);
    pcl::PointCloud<pcl::PointXYZ>::Ptr cloud_filteredx (new pcl::PointCloud<pcl::PointXYZ>);
    pcl::PointCloud<pcl::PointXYZ>::Ptr cloud_filteredy (new pcl::PointCloud<pcl::PointXYZ>);
        pcl::PointCloud<pcl::PointXYZ>::Ptr plane(new pcl::PointCloud<pcl::PointXYZ>);
    pcl::PointCloud<pcl::PointXYZ>::Ptr plane_out(new pcl::PointCloud<pcl::PointXYZ>);

    //Using the PointCloud2 data from the ROS topic
    pcl_conversions::toPCL(*input, *cloud_input);

    // Convert to the templated PointCloud
    pcl::fromPCLPointCloud2(*cloud_input, *cloud);
    pcl::PassThrough<pcl::PointXYZ> pass;
    pass.setInputCloud(cloud);
    pass.setFilterFieldName ("z");
    pass.setFilterLimits(0.95, 1.1);
    pass.filter(*cloud_filteredz);
  //1st: (0.95, 1.1)
    pass.setInputCloud(cloud_filteredz);
    pass.setFilterFieldName ("x");
    pass.setFilterLimits(-0.2, 0.05);
    pass.filter(*cloud_filteredx);
  //1st: (-0.2, 0.05)
    pass.setInputCloud(cloud_filteredx);
    pass.setFilterFieldName ("y");
    pass.setFilterLimits(-0.1, 0.3);
    pass.filter(*cloud_filteredy);
  //1st: (-0.1, 0.3)
